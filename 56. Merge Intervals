https://leetcode.com/problems/merge-intervals/

class Solution {
    /*public void sort(int[][] intervals)
    {
        for(int i=0;i<intervals.length -1;i++)
        {
            for(int j=i+1;j<intervals.length;j++)
            {
            if(intervals[i][0]>intervals[j][0])
            {
                int t1=intervals[i][0];
                //System.out.println(t1);
                int t2=intervals[i][1];
                //System.out.println(t2);
                intervals[i][0]=intervals[j][0];
                //System.out.println(intervals[i][0]);
                intervals[i][1]=intervals[j][1];
                //System.out.println(intervals[i][1]);
                intervals[j][0]=t1;
                //System.out.println(intervals[i+1][0]);
                intervals[j][1]=t2;
                //System.out.println(intervals[i+1][1]);
            }
            else if((intervals[i][0]==intervals[j][0]) && (intervals[i][1]>intervals[j][1]))
            {
                //int t1=intervals[i][0];
                int t2=intervals[i][1];
                //intervals[i][0]=intervals[i+1][0];
                intervals[i][1]=intervals[j][0];
                //intervals[i+1][0]=t1;
                intervals[j][1]=t2;
            } 
            }
        }
    }*/
    public int[][] merge(int[][] intervals) {
        List<List<Integer>> res=new ArrayList<>();
        //sort(intervals);
        Arrays.sort(intervals, new Comparator<int[]>() {
            @Override
            public int compare(int[] row1, int[] row2) {
                return Integer.compare(row1[0], row2[0]);
            }
        });
        res.add(Arrays.asList(intervals[0][0],intervals[0][1]));
        //System.out.println(res.get(0));
        for(int i=1;i<intervals.length;i++)
        {
            int len=res.size();
            if(res.get(len-1).get(1)>= intervals[i][0]  )
            {
                //System.out.println(res.get(len-1).get(1));
                if(intervals[i][1]>=res.get(len-1).get(1))
                {
                res.get(len-1).set(1,intervals[i][1]);
                }
                
            }
            else
            {
                res.add(Arrays.asList(intervals[i][0],intervals[i][1]));
                //System.out.println(res.get(len));
            }
            
        }
        int[][] nr=new int[res.size()][2];
        for(int i=0;i<res.size();i++)
        {
            nr[i][0]=res.get(i).get(0);
            nr[i][1]=res.get(i).get(1);
        }
        return nr;
        
    }
}
