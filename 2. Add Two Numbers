https://leetcode.com/problems/add-two-numbers/description/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addtoend(ListNode head,int val)
    {
        if(head==null)
        {
            return new ListNode(val);
            
        }
        ListNode temp=head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        temp.next=new ListNode(val);
        return head;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode cur1=l1;
        ListNode cur2=l2;
        ListNode head=null;
        while(cur1!=null && cur2!=null)
        {
            int sum=cur1.val +cur2.val +carry;
            if(carry!=0)
            {
                carry=0;
            }
            if(sum<10)
            {
                head=addtoend(head,sum);
            }
            else
            {
                int rem=sum%10;
                sum=sum/10;
                carry=sum;
                head=addtoend(head,rem);
            }
            cur1=cur1.next;
            cur2=cur2.next;
        }
        while(cur1!=null)
        {
            int cval=cur1.val + carry;
            if(carry!=0)
            {
                carry=0;
            } 
            if(cval<10)
            {
                head=addtoend(head,cval);
            }
            else
            {
                int rem=cval%10;
                carry=cval/10;
                head=addtoend(head,rem);
            }
            cur1=cur1.next;
        }
        while(cur2!=null)
        {
           int cval=cur2.val + carry;
            if(carry!=0)
            {
                carry=0;
            } 
            if(cval<10)
            {
                head=addtoend(head,cval);
            }
            else
            {
                int rem=cval%10;
                carry=cval/10;
                head=addtoend(head,rem);
            }
            
            cur2=cur2.next;
        }
        if(carry!=0)
        {
            head=addtoend(head,carry);
        }
        return head;
        
    }
}
